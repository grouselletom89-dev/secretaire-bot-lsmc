import discord
import os
from dotenv import load_dotenv

# --- CHARGEMENT DES VARIABLES ---
load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')

if TOKEN is None:
    print("ERREUR : Le 'DISCORD_TOKEN' n'est pas trouv√©.")
    print("Veuillez v√©rifier votre fichier .env ou les variables d'environnement sur Railway.")
    exit()

# --- CONFIGURATION ---

# ID du salon o√π le message de l'organigramme doit √™tre
TARGET_CHANNEL_ID = 1418570285841645588

# Ce dictionnaire fait le lien entre le NOM EXACT du r√¥le et ce qui doit √™tre affich√©.
# IMPORTANT : Le nom du r√¥le (√† gauche) doit √™tre PARFAITEMENT identique √† celui sur Discord.
# (majuscules, espaces, emojis s'il y en a dans le nom)
# J'ai copi√© les emojis et le texte depuis votre screenshot.
ROLES_A_SUIVRE = {
    "Responsable Morgue": "üß¨ | Responsable Morgue :",
    "Responsable H√©lico": "üöÅ | Responsable H√©lico :",
    "Responsable Psychologie": "üß† | Responsable Psychologie :",
    "Responsable Labo": "üß™ | Responsable Labo :",
    "Responsable Advanced Medecine": "ü©π | Responsable Advanced Medecine :",
    "Responsable E.M.T.": "üÖæÔ∏è | Responsable E.M.T. :",
    "Responsable du CNOM": "üìï | Responsable du CNOM :",
    "Responsable Recrutement / Formations": "üóÇÔ∏è | Responsable Recrutement / Formations :"
}

# --- VARIABLES GLOBALES ---
# On stockera le message de l'organigramme ici pour pouvoir l'√©diter
organigram_message = None

# --- CONFIGURATION DES INTENTS ---
# On s'assure que les intents 'members' et 'message_content' sont bien activ√©s
intents = discord.Intents.default()
intents.members = True          # OBLIGATOIRE pour on_member_update
intents.message_content = True  # Pour les commandes !ping

# --- INITIALISATION DU BOT ---
client = discord.Client(intents=intents)

# --- NOUVELLE FONCTION : Mettre √† jour l'organigramme ---

async def update_organigram():
    global organigram_message
    if organigram_message is None:
        print("Erreur : Tentative de mise √† jour sans message d'organigramme.")
        return

    guild = organigram_message.guild  # R√©cup√®re le serveur
    lines = [] # On va construire le message ligne par ligne

    # --- Construction du message ---
    lines.append("**Liste des G√©rants et leurs P√¥les :**\n")
    lines.append("`@ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ P√¥le EMS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`\n") # J'imite le style de votre screen

    # Boucle sur notre dictionnaire de configuration
    for role_name, display_text in ROLES_A_SUIVRE.items():
        
        # Trouve le r√¥le sur le serveur par son nom
        role = discord.utils.get(guild.roles, name=role_name)
        
        if role is None:
            # Si le r√¥le n'est pas trouv√© sur le serveur
            print(f"ATTENTION : Le r√¥le '{role_name}' est introuvable sur le serveur.")
            mentions = "`(R√¥le non trouv√©)`"
        else:
            # Si le r√¥le est trouv√©, on liste les membres qui l'ont
            members = role.members
            if not members:
                # Personne n'a le r√¥le
                mentions = " " # Laisse vide comme sur votre screen
            else:
                # Construit la liste des mentions (ex: @User1 / @User2)
                mentions = " / ".join([member.mention for member in members])
        
        # Ajoute la ligne au message
        lines.append(f"{display_text} {mentions}")

    # Combine toutes les lignes en un seul message
    content = "\n".join(lines)
    
    # Edite le message sur Discord
    try:
        await organigram_message.edit(content=content)
    except Exception as e:
        print(f"Erreur lors de l'√©dition du message : {e}")


# --- √âV√âNEMENTS DISCORD ---

@client.event
async def on_ready():
    """Appel√© quand le bot est connect√© et pr√™t."""
    global organigram_message
    
    print(f'Connect√© en tant que {client.user}!')
    print(f'ID: {client.user.id}')
    print('------')

    # --- Initialisation du message de l'organigramme ---
    channel = client.get_channel(TARGET_CHANNEL_ID)
    
    if channel is None:
        print(f"ERREUR CRITIQUE : Le canal avec l'ID {TARGET_CHANNEL_ID} est introuvable.")
        print("V√©rifiez l'ID ou les permissions du bot (doit pouvoir voir le salon).")
        return

    print(f"Recherche du message dans le canal #{channel.name}...")
    
    # Nettoie les anciens messages du bot dans ce salon pour √©viter les doublons
    try:
        await channel.purge(limit=100, check=lambda m: m.author == client.user)
        print("Anciens messages du bot nettoy√©s.")
    except discord.errors.Forbidden:
        print("ERREUR : Le bot n'a pas la permission 'G√©rer les messages' pour nettoyer le salon.")
        print("Recherche d'un message existant...")
        # (Alternative si purge √©choue, mais plus complexe - on cr√©e un nouveau message)
    except Exception as e:
        print(f"Erreur lors du nettoyage : {e}")

    # Cr√©e le nouveau message
    organigram_message = await channel.send("Initialisation de la liste des p√¥les...")
    print(f"Message d'organigramme cr√©√© (ID: {organigram_message.id}).")
    
    # Lance la premi√®re mise √† jour
    await update_organigram()
    print("Organigramme initialis√© et mis √† jour.")


@client.event
async def on_member_update(before, after):
    """Appel√© quand un membre est mis √† jour (r√¥les, pseudo, etc.)."""
    
    # 1. On v√©rifie si les r√¥les ont chang√©
    if before.roles == after.roles:
        return # Pas de changement de r√¥le, on s'arr√™te l√†

    # 2. On regarde quels r√¥les ont √©t√© ajout√©s ou retir√©s
    # (set(before.roles) ^ set(after.roles)) donne les r√¥les diff√©rents
    roles_modifies = set(before.roles) ^ set(after.roles)
    
    # 3. On v√©rifie si UN de ces r√¥les modifi√©s est dans notre liste ROLES_A_SUIVRE
    pertinent = False
    for role in roles_modifies:
        if role.name in ROLES_A_SUIVRE:
            pertinent = True
            break # Un seul r√¥le pertinent suffit

    # 4. Si le changement est pertinent, on met √† jour le message
    if pertinent:
        print(f"Mise √† jour de l'organigramme car {after.display_name} a eu un changement de r√¥le.")
        await update_organigram()


@client.event
async def on_message(message):
    """Appel√© √† chaque fois qu'un message est envoy√©."""
    
    # Ignore les messages envoy√©s par le bot lui-m√™me
    if message.author == client.user:
        return

    # Commande !ping (toujours utile pour tester)
    if message.content.startswith('!ping'):
        await message.channel.send('Pong!')


# --- D√âMARRAGE DU BOT ---
try:
    client.run(TOKEN)
except Exception as e:
    print(f"Une erreur fatale est survenue au lancement : {e}")
